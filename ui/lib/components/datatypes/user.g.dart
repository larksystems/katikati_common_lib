// This generated file is imported by "user.dart" residing in the same directory as this file
// and should not be imported or exported by any other file.
//
//   Source File  : Lark/Katikati-Core/katikati_lib/lib/datatypes/nook_user.dart
//   Source SHA   : d85a41b7dc82c1bd42b654b9da4573c5faf274f7fa06e7242038595f6f50bfb7
//   Generated by : danrubel
//
// Use "kktool codegen Lark/Katikati-Core/katikati_lib/lib/datatypes/nook_user.dart" to regenerate this file.
// Adjust the imports as necessary as they are preserved when the code is regenerated.

import 'dart:async';

import 'package:katikati_ui_lib/components/datatypes/doc_storage_util.dart';
import 'package:katikati_ui_lib/components/logger.dart';

class UserConfiguration {
  static const collectionName = 'users';

  String docId;
  bool tags_keyboard_shortcuts_enabled;
  bool replies_keyboard_shortcuts_enabled;
  bool send_messages_enabled;
  bool send_custom_messages_enabled;
  bool send_multi_message_enabled;
  bool tag_messages_enabled;
  bool tag_conversations_enabled;
  bool edit_translations_enabled;
  bool edit_notes_enabled;
  bool conversational_turns_enabled;
  bool tags_panel_visibility;
  bool replies_panel_visibility;
  bool suggested_replies_groups_enabled;

  // Alias
  String get userId => docId;
  bool get tagsKeyboardShortcutsEnabled => tags_keyboard_shortcuts_enabled;
  bool get repliesKeyboardShortcutsEnabled => replies_keyboard_shortcuts_enabled;
  bool get sendMessagesEnabled => send_messages_enabled;
  bool get sendCustomMessagesEnabled => send_custom_messages_enabled;
  bool get sendMultiMessageEnabled => send_multi_message_enabled;
  bool get tagMessagesEnabled => tag_messages_enabled;
  bool get tagConversationsEnabled => tag_conversations_enabled;
  bool get editTranslationsEnabled => edit_translations_enabled;
  bool get editNotesEnabled => edit_notes_enabled;
  bool get conversationalTurnsEnabled => conversational_turns_enabled;
  bool get tagsPanelVisibility => tags_panel_visibility;
  bool get repliesPanelVisibility => replies_panel_visibility;
  bool get suggestedRepliesGroupsEnabled => suggested_replies_groups_enabled;

  set tagsKeyboardShortcutsEnabled(bool value) => tags_keyboard_shortcuts_enabled = value;
  set repliesKeyboardShortcutsEnabled(bool value) => replies_keyboard_shortcuts_enabled = value;
  set sendMessagesEnabled(bool value) => send_messages_enabled = value;
  set sendCustomMessagesEnabled(bool value) => send_custom_messages_enabled = value;
  set sendMultiMessageEnabled(bool value) => send_multi_message_enabled = value;
  set tagMessagesEnabled(bool value) => tag_messages_enabled = value;
  set tagConversationsEnabled(bool value) => tag_conversations_enabled = value;
  set editTranslationsEnabled(bool value) => edit_translations_enabled = value;
  set editNotesEnabled(bool value) => edit_notes_enabled = value;
  set conversationalTurnsEnabled(bool value) => conversational_turns_enabled = value;
  set tagsPanelVisibility(bool value) => tags_panel_visibility = value;
  set repliesPanelVisibility(bool value) => replies_panel_visibility = value;
  set suggestedRepliesGroupsEnabled(bool value) => suggested_replies_groups_enabled = value;

  String get userConfigurationId => docId;

  static UserConfiguration fromSnapshot(DocSnapshot doc, [UserConfiguration modelObj]) => fromData(doc.data, modelObj)..docId = doc.id;

  static UserConfiguration fromData(data, [UserConfiguration modelObj]) {
    if (data == null) return null;
    return (modelObj ?? UserConfiguration())
      ..tags_keyboard_shortcuts_enabled = bool_fromData(_log, 'tags_keyboard_shortcuts_enabled', data)
      ..replies_keyboard_shortcuts_enabled = bool_fromData(_log, 'replies_keyboard_shortcuts_enabled', data)
      ..send_messages_enabled = bool_fromData(_log, 'send_messages_enabled', data)
      ..send_custom_messages_enabled = bool_fromData(_log, 'send_custom_messages_enabled', data)
      ..send_multi_message_enabled = bool_fromData(_log, 'send_multi_message_enabled', data)
      ..tag_messages_enabled = bool_fromData(_log, 'tag_messages_enabled', data)
      ..tag_conversations_enabled = bool_fromData(_log, 'tag_conversations_enabled', data)
      ..edit_translations_enabled = bool_fromData(_log, 'edit_translations_enabled', data)
      ..edit_notes_enabled = bool_fromData(_log, 'edit_notes_enabled', data)
      ..conversational_turns_enabled = bool_fromData(_log, 'conversational_turns_enabled', data)
      ..tags_panel_visibility = bool_fromData(_log, 'tags_panel_visibility', data)
      ..replies_panel_visibility = bool_fromData(_log, 'replies_panel_visibility', data)
      ..suggested_replies_groups_enabled = bool_fromData(_log, 'suggested_replies_groups_enabled', data);
  }

  static StreamSubscription listen(DocStorage docStorage, UserConfigurationCollectionListener listener,
          {String collectionRoot = '/$collectionName', OnErrorListener onError, @Deprecated('use onError instead') OnErrorListener onErrorListener}) =>
      listenForUpdates<UserConfiguration>(_log, docStorage, listener, collectionRoot, UserConfiguration.fromSnapshot, onError: onError ?? onErrorListener);

  Map<String, dynamic> toData() {
    return {
      if (tags_keyboard_shortcuts_enabled != null) 'tags_keyboard_shortcuts_enabled': tags_keyboard_shortcuts_enabled,
      if (replies_keyboard_shortcuts_enabled != null) 'replies_keyboard_shortcuts_enabled': replies_keyboard_shortcuts_enabled,
      if (send_messages_enabled != null) 'send_messages_enabled': send_messages_enabled,
      if (send_custom_messages_enabled != null) 'send_custom_messages_enabled': send_custom_messages_enabled,
      if (send_multi_message_enabled != null) 'send_multi_message_enabled': send_multi_message_enabled,
      if (tag_messages_enabled != null) 'tag_messages_enabled': tag_messages_enabled,
      if (tag_conversations_enabled != null) 'tag_conversations_enabled': tag_conversations_enabled,
      if (edit_translations_enabled != null) 'edit_translations_enabled': edit_translations_enabled,
      if (edit_notes_enabled != null) 'edit_notes_enabled': edit_notes_enabled,
      if (conversational_turns_enabled != null) 'conversational_turns_enabled': conversational_turns_enabled,
      if (tags_panel_visibility != null) 'tags_panel_visibility': tags_panel_visibility,
      if (replies_panel_visibility != null) 'replies_panel_visibility': replies_panel_visibility,
      if (suggested_replies_groups_enabled != null) 'suggested_replies_groups_enabled': suggested_replies_groups_enabled,
    };
  }

  @override
  String toString() => 'UserConfiguration [$docId]: ${toData().toString()}';
}

typedef UserConfigurationCollectionListener = void Function(
  List<UserConfiguration> added,
  List<UserConfiguration> modified,
  List<UserConfiguration> removed,
);

class UserPresence {
  static const collectionName = 'user_presence';

  String docId;
  String timestamp;
  String conversation_id;

  // Alias
  String get userId => docId;
  String get conversationId => conversation_id;

  set conversationId(String value) => conversation_id = value;

  String get userPresenceId => docId;

  static UserPresence fromSnapshot(DocSnapshot doc, [UserPresence modelObj]) => fromData(doc.data, modelObj)..docId = doc.id;

  static UserPresence fromData(data, [UserPresence modelObj]) {
    if (data == null) return null;
    return (modelObj ?? UserPresence())
      ..timestamp = data['timestamp']?.toString()
      ..conversation_id = data['conversation_id']?.toString();
  }

  static StreamSubscription listen(DocStorage docStorage, UserPresenceCollectionListener listener,
          {String collectionRoot = '/$collectionName', OnErrorListener onError, @Deprecated('use onError instead') OnErrorListener onErrorListener}) =>
      listenForUpdates<UserPresence>(_log, docStorage, listener, collectionRoot, UserPresence.fromSnapshot, onError: onError ?? onErrorListener);

  Map<String, dynamic> toData() {
    return {
      if (timestamp != null) 'timestamp': timestamp,
      if (conversation_id != null) 'conversation_id': conversation_id,
    };
  }

  @override
  String toString() => 'UserPresence [$docId]: ${toData().toString()}';
}

typedef UserPresenceCollectionListener = void Function(
  List<UserPresence> added,
  List<UserPresence> modified,
  List<UserPresence> removed,
);

final _log = Logger('user.g.dart');
