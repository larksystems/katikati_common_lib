// This generated file is imported by "visualisation_component.dart" residing in the same directory as this file
// and should not be imported or exported by any other file.
//
//   Source File  : Lark/Katikati-Core/katikati_lib/lib/datatypes/nook_visualisation_component.dart
//   Source SHA   : 9e3a4713bf5de0418c173670e2ba60e3b750cbc6a07d79a9523d47de1be4d708
//   Generated by : mariana
//
// Use "kktool codegen Lark/Katikati-Core/katikati_lib/lib/datatypes/nook_visualisation_component.dart" to regenerate this file.
// Adjust the imports as necessary as they are preserved when the code is regenerated.

import 'dart:async';

import 'package:katikati_ui_lib/datatypes/doc_storage_util.dart';
import 'package:katikati_ui_lib/components/logger.dart';

class ExplorerVisualisationComponent {
  static const collectionName = 'explorer';

  String docId;
  int indexInDashboard;
  VisualisationComponentType componentType;
  Map<String, dynamic> configurationInfo;

  String get explorerVisualisationComponentId => docId;

  Map<String, dynamic> otherData;

  static ExplorerVisualisationComponent fromSnapshot(DocSnapshot doc, [ExplorerVisualisationComponent modelObj]) => fromData(doc.data, modelObj)..docId = doc.id;

  static ExplorerVisualisationComponent fromData(data, [ExplorerVisualisationComponent modelObj]) {
    if (data == null) return null;
    (modelObj ??= ExplorerVisualisationComponent())
      ..indexInDashboard = int_fromData(_log, 'indexInDashboard', data)
      ..componentType = VisualisationComponentType.fromData(_log, 'componentType', data)
      ..configurationInfo = Map_fromData<dynamic>(_log, 'configurationInfo', data)
      ..otherData ??= {};
    for (var key in data.keys) {
      if ({'docId', 'indexInDashboard', 'componentType', 'configurationInfo',}.contains(key)) continue;
      modelObj.otherData[key] = data[key];
    }
    return modelObj;
  }

  static StreamSubscription listen(DocStorage docStorage, ExplorerVisualisationComponentCollectionListener listener,
          {String collectionRoot = '/$collectionName', OnErrorListener onError, @Deprecated('use onError instead') OnErrorListener onErrorListener}) =>
      listenForUpdates<ExplorerVisualisationComponent>(_log, docStorage, listener, collectionRoot, ExplorerVisualisationComponent.fromSnapshot, onError: onError ?? onErrorListener);

  Map<String, dynamic> toData({bool validate: true}) {
    return {
      if (indexInDashboard != null) 'indexInDashboard': indexInDashboard,
      if (componentType != null) 'componentType': componentType.toData(validate: validate),
      if (configurationInfo != null) 'configurationInfo': configurationInfo,
      if (otherData != null) ...otherData,
    };
  }

  @override
  String toString() => 'ExplorerVisualisationComponent($docId, ${toData(validate: false)})';
}

typedef ExplorerVisualisationComponentCollectionListener = void Function(
  List<ExplorerVisualisationComponent> added,
  List<ExplorerVisualisationComponent> modified,
  List<ExplorerVisualisationComponent> removed,
);

class VisualisationComponentType {
  static const caseLogicTracker = VisualisationComponentType('caseLogicTracker');
  static const inOutMessageTracker = VisualisationComponentType('inOutMessageTracker');
  static const needsReplyTracker = VisualisationComponentType('needsReplyTracker');
  static const tagGroupAnalysis = VisualisationComponentType('tagGroupAnalysis');

  static const values = <VisualisationComponentType>[
    caseLogicTracker,
    inOutMessageTracker,
    needsReplyTracker,
    tagGroupAnalysis,
  ];

  static VisualisationComponentType fromData(Logger log, String key, dynamic data) {
    if (data == null) return null;
    var value = data[key];
    if (value == null) return null;
    if (value is VisualisationComponentType) return value;
    if (value is String) {
      const prefix = 'VisualisationComponentType.';
      var valueName = value.startsWith(prefix) ? value.substring(prefix.length) : value;
      for (var value in values) {
        if (value.name == valueName) return value;
      }
      log.warning('Unknown VisualisationComponentType $value at "$key" in $data');
      return caseLogicTracker;
    }
    log.warning('Expected VisualisationComponentType at "$key", but found "$value" in $data');
    return caseLogicTracker;
  }

  final String name;
  const VisualisationComponentType(this.name);

  String toData({bool validate}) => 'VisualisationComponentType.$name';

  @override
  String toString() => toData();
}

final _log = Logger('visualisation_component.g.dart');
