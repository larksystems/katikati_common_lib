// This generated file is imported by "suggested_reply.dart" residing in the same directory as this file
// and should not be imported or exported by any other file.
//
//   Source File  : Lark/Katikati-Core/katikati_lib/lib/datatypes/nook_suggested_reply.dart
//   Source SHA   : 43031f40b6365dfb74877b5441c3d7fc87f35ebab1298eb579f6ea8aa2ae28aa
//   Generated by : danrubel
//
// Use "kktool codegen Lark/Katikati-Core/katikati_lib/lib/datatypes/nook_suggested_reply.dart" to regenerate this file.
// Adjust the imports as necessary as they are preserved when the code is regenerated.

import 'dart:async';

import 'package:katikati_ui_lib/datatypes/doc_storage_util.dart';
import 'package:katikati_ui_lib/components/logger.dart';

class SuggestedReply {
  static const collectionName = 'suggestedReplies';

  String docId;
  String text;
  String translation;
  String shortcut;
  int seq_no;
  String category;
  String group_id;
  String group_description;
  int index_in_group;
  Map<String, dynamic> additionalInfo;

  // Alias
  int get seqNumber => seq_no;
  String get groupId => group_id;
  String get groupDescription => group_description;
  int get indexInGroup => index_in_group;

  set seqNumber(int value) => seq_no = value;
  set groupId(String value) => group_id = value;
  set groupDescription(String value) => group_description = value;
  set indexInGroup(int value) => index_in_group = value;

  String get suggestedReplyId => docId;

  static SuggestedReply fromSnapshot(DocSnapshot doc, [SuggestedReply modelObj]) => fromData(doc.data, modelObj)..docId = doc.id;

  static SuggestedReply fromData(data, [SuggestedReply modelObj]) {
    if (data == null) return null;
    return (modelObj ?? SuggestedReply())
      ..text = data['text']?.toString()
      ..translation = data['translation']?.toString()
      ..shortcut = data['shortcut']?.toString()
      ..seq_no = int_fromData(_log, 'seq_no', data)
      ..category = data['category']?.toString()
      ..group_id = data['group_id']?.toString()
      ..group_description = data['group_description']?.toString()
      ..index_in_group = int_fromData(_log, 'index_in_group', data)
      ..additionalInfo = Map_fromData<dynamic>(_log, 'additionalInfo', data);
  }

  static StreamSubscription listen(DocStorage docStorage, SuggestedReplyCollectionListener listener,
          {String collectionRoot = '/$collectionName', OnErrorListener onError, @Deprecated('use onError instead') OnErrorListener onErrorListener}) =>
      listenForUpdates<SuggestedReply>(_log, docStorage, listener, collectionRoot, SuggestedReply.fromSnapshot, onError: onError ?? onErrorListener);

  Map<String, dynamic> toData() {
    return {
      if (text != null) 'text': text,
      if (translation != null) 'translation': translation,
      if (shortcut != null) 'shortcut': shortcut,
      if (seq_no != null) 'seq_no': seq_no,
      if (category != null) 'category': category,
      if (group_id != null) 'group_id': group_id,
      if (group_description != null) 'group_description': group_description,
      if (index_in_group != null) 'index_in_group': index_in_group,
      if (additionalInfo != null) 'additionalInfo': additionalInfo,
    };
  }

  @override
  String toString() => 'SuggestedReply [$docId]: ${toData().toString()}';
}

typedef SuggestedReplyCollectionListener = void Function(
  List<SuggestedReply> added,
  List<SuggestedReply> modified,
  List<SuggestedReply> removed,
);

final _log = Logger('suggested_reply.g.dart');
