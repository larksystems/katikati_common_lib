// This generated file is imported by "conversation_list_shard.dart" residing in the same directory as this file
// and should not be imported or exported by any other file.
//
//   Source File  : Lark/Katikati-Core/katikati_lib/lib/datatypes/nook_conversation_list_shard.dart
//   Source SHA   : a9ea51a4f7341664f551d734d2f316b8dc28a404167da98ce1e9475eb5c4d363
//   Generated by : mariana
//
// Use "kktool codegen Lark/Katikati-Core/katikati_lib/lib/datatypes/nook_conversation_list_shard.dart" to regenerate this file.
// Adjust the imports as necessary as they are preserved when the code is regenerated.

import 'dart:async';

import 'package:katikati_ui_lib/datatypes/doc_storage_util.dart';
import 'package:katikati_ui_lib/components/logger.dart';

class ConversationListShard {
  static const collectionName = 'nook_conversation_shards';

  String docId;
  String name;
  int num_shards;
  Map<String, dynamic> otherData;

  // Alias
  int get numShards => num_shards;

  set numShards(int value) => num_shards = value;

  String get conversationListShardId => docId;

  static ConversationListShard fromSnapshot(DocSnapshot doc, [ConversationListShard modelObj]) => fromData(doc.data, modelObj)..docId = doc.id;

  static ConversationListShard fromData(data, [ConversationListShard modelObj]) {
    if (data == null) return null;
    Map<String, dynamic> otherData;
    data.forEach((key, value) {
      if (!_fieldNames.contains(key) && value != null) {
        (otherData ??= {})[key] = value;
      }
    });
    (modelObj ??= ConversationListShard())
      ..name = data['name']?.toString()
      ..num_shards = int_fromData(_log, 'num_shards', data)
      ..otherData = otherData;
    return modelObj;
  }

  static StreamSubscription listen(DocStorage docStorage, ConversationListShardCollectionListener listener,
          {String collectionRoot = '/$collectionName', List<DocQuery> queryList, int limit, OnErrorListener onError}) =>
      listenForUpdates<ConversationListShard>(_log, docStorage, listener, collectionRoot, ConversationListShard.fromSnapshot, queryList: queryList, limit: limit, onError: onError);

  Map<String, dynamic> toData({bool validate: true}) {
    return {
      if (name != null) 'name': name,
      if (num_shards != null) 'num_shards': num_shards,
      if (otherData != null) ...otherData,
    };
  }

  @override
  String toString() => 'ConversationListShard($docId, ${toData(validate: false)})';

  static const _fieldNames = {'docId', 'name', 'num_shards'};
}

typedef ConversationListShardCollectionListener = void Function(
  List<ConversationListShard> added,
  List<ConversationListShard> modified,
  List<ConversationListShard> removed,
);

final _log = Logger('conversation_list_shard.g.dart');
