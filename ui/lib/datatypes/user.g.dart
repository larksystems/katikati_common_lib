// This generated file is imported by "user.dart" residing in the same directory as this file
// and should not be imported or exported by any other file.
//
//   Source File  : Lark/Katikati-Core/katikati_lib/lib/datatypes/nook_user.dart
//   Source SHA   : 8930f78055e2d94a0edeb99c614a4f9909336ac8303e0dfd2afb6d0738e10368
//   Generated by : mariana
//
// Use "kktool codegen Lark/Katikati-Core/katikati_lib/lib/datatypes/nook_user.dart" to regenerate this file.
// Adjust the imports as necessary as they are preserved when the code is regenerated.

import 'dart:async';

import 'package:katikati_ui_lib/datatypes/doc_storage_util.dart';
import 'package:katikati_ui_lib/components/logger.dart';

class UserConfiguration {
  static const collectionName = 'users';

  String docId;
  UserRole role;
  UserStatus status;
  bool tags_keyboard_shortcuts_enabled;
  bool replies_keyboard_shortcuts_enabled;
  bool send_messages_enabled;
  bool send_custom_messages_enabled;
  bool send_multi_message_enabled;
  bool tag_messages_enabled;
  bool tag_conversations_enabled;
  bool edit_translations_enabled;
  bool edit_notes_enabled;
  bool edit_tags_enabled;
  bool edit_standard_messages_enabled;
  bool conversational_turns_enabled;
  bool tags_panel_visibility;
  bool replies_panel_visibility;
  bool turnline_panel_visibility;
  bool suggested_replies_groups_enabled;
  bool sample_messages_enabled;
  String console_logging_level;
  Set<String> mandatory_include_tag_ids;
  Set<String> mandatory_exclude_tag_ids;
  Set<String> multi_select_exclude_tag_ids;
  Map<String, dynamic> otherData;

  // Alias
  String get userId => docId;
  bool get tagsKeyboardShortcutsEnabled => tags_keyboard_shortcuts_enabled;
  bool get repliesKeyboardShortcutsEnabled => replies_keyboard_shortcuts_enabled;
  bool get sendMessagesEnabled => send_messages_enabled;
  bool get sendCustomMessagesEnabled => send_custom_messages_enabled;
  bool get sendMultiMessageEnabled => send_multi_message_enabled;
  bool get tagMessagesEnabled => tag_messages_enabled;
  bool get tagConversationsEnabled => tag_conversations_enabled;
  bool get editTranslationsEnabled => edit_translations_enabled;
  bool get editNotesEnabled => edit_notes_enabled;
  bool get editTagsEnabled => edit_tags_enabled;
  bool get editStandardMessagesEnabled => edit_standard_messages_enabled;
  bool get conversationalTurnsEnabled => conversational_turns_enabled;
  bool get tagsPanelVisibility => tags_panel_visibility;
  bool get repliesPanelVisibility => replies_panel_visibility;
  bool get turnlinePanelVisibility => turnline_panel_visibility;
  bool get suggestedRepliesGroupsEnabled => suggested_replies_groups_enabled;
  bool get sampleMessagesEnabled => sample_messages_enabled;
  String get consoleLoggingLevel => console_logging_level;
  Set<String> get mandatoryIncludeTagIds => mandatory_include_tag_ids;
  Set<String> get mandatoryExcludeTagIds => mandatory_exclude_tag_ids;
  Set<String> get multiSelectExcludeTagIds => multi_select_exclude_tag_ids;

  set tagsKeyboardShortcutsEnabled(bool value) => tags_keyboard_shortcuts_enabled = value;
  set repliesKeyboardShortcutsEnabled(bool value) => replies_keyboard_shortcuts_enabled = value;
  set sendMessagesEnabled(bool value) => send_messages_enabled = value;
  set sendCustomMessagesEnabled(bool value) => send_custom_messages_enabled = value;
  set sendMultiMessageEnabled(bool value) => send_multi_message_enabled = value;
  set tagMessagesEnabled(bool value) => tag_messages_enabled = value;
  set tagConversationsEnabled(bool value) => tag_conversations_enabled = value;
  set editTranslationsEnabled(bool value) => edit_translations_enabled = value;
  set editNotesEnabled(bool value) => edit_notes_enabled = value;
  set editTagsEnabled(bool value) => edit_tags_enabled = value;
  set editStandardMessagesEnabled(bool value) => edit_standard_messages_enabled = value;
  set conversationalTurnsEnabled(bool value) => conversational_turns_enabled = value;
  set tagsPanelVisibility(bool value) => tags_panel_visibility = value;
  set repliesPanelVisibility(bool value) => replies_panel_visibility = value;
  set turnlinePanelVisibility(bool value) => turnline_panel_visibility = value;
  set suggestedRepliesGroupsEnabled(bool value) => suggested_replies_groups_enabled = value;
  set sampleMessagesEnabled(bool value) => sample_messages_enabled = value;
  set consoleLoggingLevel(String value) => console_logging_level = value;
  set mandatoryIncludeTagIds(Set<String> value) => mandatory_include_tag_ids = value;
  set mandatoryExcludeTagIds(Set<String> value) => mandatory_exclude_tag_ids = value;
  set multiSelectExcludeTagIds(Set<String> value) => multi_select_exclude_tag_ids = value;

  String get userConfigurationId => docId;

  static UserConfiguration fromSnapshot(DocSnapshot doc, [UserConfiguration modelObj]) => fromData(doc.data, modelObj)..docId = doc.id;

  static UserConfiguration fromData(data, [UserConfiguration modelObj]) {
    if (data == null) return null;
    Map<String, dynamic> otherData;
    data.forEach((key, value) {
      if (!_fieldNames.contains(key) && value != null) {
        (otherData ??= {})[key] = value;
      }
    });
    (modelObj ??= UserConfiguration())
      ..role = UserRole.fromData(_log, 'role', data)
      ..status = UserStatus.fromData(_log, 'status', data)
      ..tags_keyboard_shortcuts_enabled = bool_fromData(_log, 'tags_keyboard_shortcuts_enabled', data)
      ..replies_keyboard_shortcuts_enabled = bool_fromData(_log, 'replies_keyboard_shortcuts_enabled', data)
      ..send_messages_enabled = bool_fromData(_log, 'send_messages_enabled', data)
      ..send_custom_messages_enabled = bool_fromData(_log, 'send_custom_messages_enabled', data)
      ..send_multi_message_enabled = bool_fromData(_log, 'send_multi_message_enabled', data)
      ..tag_messages_enabled = bool_fromData(_log, 'tag_messages_enabled', data)
      ..tag_conversations_enabled = bool_fromData(_log, 'tag_conversations_enabled', data)
      ..edit_translations_enabled = bool_fromData(_log, 'edit_translations_enabled', data)
      ..edit_notes_enabled = bool_fromData(_log, 'edit_notes_enabled', data)
      ..edit_tags_enabled = bool_fromData(_log, 'edit_tags_enabled', data)
      ..edit_standard_messages_enabled = bool_fromData(_log, 'edit_standard_messages_enabled', data)
      ..conversational_turns_enabled = bool_fromData(_log, 'conversational_turns_enabled', data)
      ..tags_panel_visibility = bool_fromData(_log, 'tags_panel_visibility', data)
      ..replies_panel_visibility = bool_fromData(_log, 'replies_panel_visibility', data)
      ..turnline_panel_visibility = bool_fromData(_log, 'turnline_panel_visibility', data)
      ..suggested_replies_groups_enabled = bool_fromData(_log, 'suggested_replies_groups_enabled', data)
      ..sample_messages_enabled = bool_fromData(_log, 'sample_messages_enabled', data)
      ..console_logging_level = data['console_logging_level']?.toString()
      ..mandatory_include_tag_ids = Set_fromData<String>(_log, 'mandatory_include_tag_ids', data)
      ..mandatory_exclude_tag_ids = Set_fromData<String>(_log, 'mandatory_exclude_tag_ids', data)
      ..multi_select_exclude_tag_ids = Set_fromData<String>(_log, 'multi_select_exclude_tag_ids', data)
      ..otherData = otherData;
    return modelObj;
  }

  static StreamSubscription listen(DocStorage docStorage, UserConfigurationCollectionListener listener,
          {String collectionRoot = '/$collectionName', List<DocQuery> queryList, OnErrorListener onError, @Deprecated('use onError instead') OnErrorListener onErrorListener}) =>
      listenForUpdates<UserConfiguration>(_log, docStorage, listener, collectionRoot, UserConfiguration.fromSnapshot, queryList: queryList, onError: onError ?? onErrorListener);

  Map<String, dynamic> toData({bool validate: true}) {
    return {
      if (role != null) 'role': role.toData(validate: validate),
      if (status != null) 'status': status.toData(validate: validate),
      if (tags_keyboard_shortcuts_enabled != null) 'tags_keyboard_shortcuts_enabled': tags_keyboard_shortcuts_enabled,
      if (replies_keyboard_shortcuts_enabled != null) 'replies_keyboard_shortcuts_enabled': replies_keyboard_shortcuts_enabled,
      if (send_messages_enabled != null) 'send_messages_enabled': send_messages_enabled,
      if (send_custom_messages_enabled != null) 'send_custom_messages_enabled': send_custom_messages_enabled,
      if (send_multi_message_enabled != null) 'send_multi_message_enabled': send_multi_message_enabled,
      if (tag_messages_enabled != null) 'tag_messages_enabled': tag_messages_enabled,
      if (tag_conversations_enabled != null) 'tag_conversations_enabled': tag_conversations_enabled,
      if (edit_translations_enabled != null) 'edit_translations_enabled': edit_translations_enabled,
      if (edit_notes_enabled != null) 'edit_notes_enabled': edit_notes_enabled,
      if (edit_tags_enabled != null) 'edit_tags_enabled': edit_tags_enabled,
      if (edit_standard_messages_enabled != null) 'edit_standard_messages_enabled': edit_standard_messages_enabled,
      if (conversational_turns_enabled != null) 'conversational_turns_enabled': conversational_turns_enabled,
      if (tags_panel_visibility != null) 'tags_panel_visibility': tags_panel_visibility,
      if (replies_panel_visibility != null) 'replies_panel_visibility': replies_panel_visibility,
      if (turnline_panel_visibility != null) 'turnline_panel_visibility': turnline_panel_visibility,
      if (suggested_replies_groups_enabled != null) 'suggested_replies_groups_enabled': suggested_replies_groups_enabled,
      if (sample_messages_enabled != null) 'sample_messages_enabled': sample_messages_enabled,
      if (console_logging_level != null) 'console_logging_level': console_logging_level,
      if (mandatory_include_tag_ids != null) 'mandatory_include_tag_ids': mandatory_include_tag_ids.toList(),
      if (mandatory_exclude_tag_ids != null) 'mandatory_exclude_tag_ids': mandatory_exclude_tag_ids.toList(),
      if (multi_select_exclude_tag_ids != null) 'multi_select_exclude_tag_ids': multi_select_exclude_tag_ids.toList(),
      if (otherData != null) ...otherData,
    };
  }

  @override
  String toString() => 'UserConfiguration($docId, ${toData(validate: false)})';

  static const _fieldNames = {'docId', 'role', 'status', 'tags_keyboard_shortcuts_enabled', 'replies_keyboard_shortcuts_enabled', 'send_messages_enabled', 'send_custom_messages_enabled', 'send_multi_message_enabled', 'tag_messages_enabled', 'tag_conversations_enabled', 'edit_translations_enabled', 'edit_notes_enabled', 'edit_tags_enabled', 'edit_standard_messages_enabled', 'conversational_turns_enabled', 'tags_panel_visibility', 'replies_panel_visibility', 'turnline_panel_visibility', 'suggested_replies_groups_enabled', 'sample_messages_enabled', 'console_logging_level', 'mandatory_include_tag_ids', 'mandatory_exclude_tag_ids', 'multi_select_exclude_tag_ids'};
}

typedef UserConfigurationCollectionListener = void Function(
  List<UserConfiguration> added,
  List<UserConfiguration> modified,
  List<UserConfiguration> removed,
);

class UserPresence {
  static const collectionName = 'user_presence';

  String docId;
  String timestamp;
  String conversation_id;
  Map<String, dynamic> otherData;

  // Alias
  String get userId => docId;
  String get conversationId => conversation_id;

  set conversationId(String value) => conversation_id = value;

  String get userPresenceId => docId;

  static UserPresence fromSnapshot(DocSnapshot doc, [UserPresence modelObj]) => fromData(doc.data, modelObj)..docId = doc.id;

  static UserPresence fromData(data, [UserPresence modelObj]) {
    if (data == null) return null;
    Map<String, dynamic> otherData;
    data.forEach((key, value) {
      if (!_fieldNames.contains(key) && value != null) {
        (otherData ??= {})[key] = value;
      }
    });
    (modelObj ??= UserPresence())
      ..timestamp = data['timestamp']?.toString()
      ..conversation_id = data['conversation_id']?.toString()
      ..otherData = otherData;
    return modelObj;
  }

  static StreamSubscription listen(DocStorage docStorage, UserPresenceCollectionListener listener,
          {String collectionRoot = '/$collectionName', List<DocQuery> queryList, OnErrorListener onError, @Deprecated('use onError instead') OnErrorListener onErrorListener}) =>
      listenForUpdates<UserPresence>(_log, docStorage, listener, collectionRoot, UserPresence.fromSnapshot, queryList: queryList, onError: onError ?? onErrorListener);

  Map<String, dynamic> toData({bool validate: true}) {
    return {
      if (timestamp != null) 'timestamp': timestamp,
      if (conversation_id != null) 'conversation_id': conversation_id,
      if (otherData != null) ...otherData,
    };
  }

  @override
  String toString() => 'UserPresence($docId, ${toData(validate: false)})';

  static const _fieldNames = {'docId', 'timestamp', 'conversation_id'};
}

typedef UserPresenceCollectionListener = void Function(
  List<UserPresence> added,
  List<UserPresence> modified,
  List<UserPresence> removed,
);

class UserRole {
  static const defaultUser = UserRole('defaultUser');
  static const user = UserRole('user');
  static const projectAdmin = UserRole('projectAdmin');
  static const superAdmin = UserRole('superAdmin');

  static const values = <UserRole>[
    defaultUser,
    user,
    projectAdmin,
    superAdmin,
  ];

  static UserRole fromData(Logger log, String key, dynamic data) {
    if (data == null) return null;
    var value = data[key];
    if (value == null) return null;
    if (value is UserRole) return value;
    if (value is String) {
      const prefix = 'UserRole.';
      var valueName = value.startsWith(prefix) ? value.substring(prefix.length) : value;
      for (var value in values) {
        if (value.name == valueName) return value;
      }
      log.warning('Unknown UserRole $value at "$key" in $data');
      return defaultUser;
    }
    log.warning('Expected UserRole at "$key", but found "$value" in $data');
    return defaultUser;
  }

  final String name;
  const UserRole(this.name);

  String toData({bool validate}) => 'UserRole.$name';

  @override
  String toString() => toData();
}

class UserStatus {
  static const active = UserStatus('active');
  static const deactivated = UserStatus('deactivated');

  static const values = <UserStatus>[
    active,
    deactivated,
  ];

  static UserStatus fromData(Logger log, String key, dynamic data) {
    if (data == null) return null;
    var value = data[key];
    if (value == null) return null;
    if (value is UserStatus) return value;
    if (value is String) {
      const prefix = 'UserStatus.';
      var valueName = value.startsWith(prefix) ? value.substring(prefix.length) : value;
      for (var value in values) {
        if (value.name == valueName) return value;
      }
      log.warning('Unknown UserStatus $value at "$key" in $data');
      return active;
    }
    log.warning('Expected UserStatus at "$key", but found "$value" in $data');
    return active;
  }

  final String name;
  const UserStatus(this.name);

  String toData({bool validate}) => 'UserStatus.$name';

  @override
  String toString() => toData();
}

final _log = Logger('user.g.dart');
